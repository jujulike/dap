<?php
/**
 * Created by PhpStorm.
 * User: BikeVR
 * Date: 2020/10/12
 * Time: 14:49.
 */

namespace app\apihome\controller;

use think\Db;

class Payorder extends Home
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /*
     * 提交订单
     */

    public function payment()
    {
        $user_id = $this->uid;
        $types = _param('types', '', 0, false); //是否直接购买
        if ($types) {
            $goodid = _param('gid', '商品错误');
            $num = _param('num', '', '1', false);
            $cartall = ['goodid' => $goodid, 'num' => $num];
        } else {
            $cartall = _param('cart_id', '请选择商品');
        }
        $mylist = $this->cartgoods($types, $cartall); //商品明细
        //优惠券
        $couponid = _param('couponid', '', '', false);
        $couponprice = 0;
        if ($couponid) {
            $couponprice = db('mycoupon')->where(['id' => $couponid])->value('minprice');
        }
        $dispatchprice = 0;
        $is_dispatch = _param('dispatch', '请选择配送方式'); ///配送方式
        if ($is_dispatch == 3) {
            $data['username'] = _param('username', '请填写取货人信息'); ///配送方式;
            $data['usertime'] = _param('usertime', '请填写取货时间'); ///配送方式;
            $data['userphone'] = _param('userphone', '请填写取货人信息'); ///配送方式;
            $row['username'] = _param('username', '请填写取货人信息'); ///配送方式;
            $row['usertime'] = _param('usertime', '请填写取货时间'); ///配送方式;
            $row['userphone'] = _param('userphone', '请填写取货人信息'); ///配送方式;
            $data['couponprice'] = 0;
            $data['couponid'] = 0;
        } else {
            $addr_id = _param('addr_id', '请填写收货地址');
            $addr = db('Address')->where(['id' => $addr_id])->find();
            $data['addressid'] = $addr_id;
            $data['address'] = $addr['name'].'|'.$addr['mobile'].'|'.$addr['city'].$addr['address'];
            $dispatchpriceall = $this->getNewPlace($addr['address'], $mylist['total'], $is_dispatch);
            $dispatchprice = $dispatchpriceall['waymoney'];
            $row['addressid'] = $addr_id;
            $row['address'] = $addr['name'].'|'.$addr['mobile'].'|'.$addr['city'].$addr['address'];
            $data['couponprice'] = $couponprice;
            $data['couponid'] = $couponid;
        }
        $data['malltype'] = $is_dispatch;
        //生成订单
        $pay_type = 1;
        $price = $mylist['goodsprice'] + $dispatchprice - $couponprice;
        if ($price < 0) {
            $price = 0;
        }
        $data['uid'] = intval($user_id);
        $data['addtime'] = time();
        $data['order_sn'] = $this->randStr(14, 'mixed'); //生成唯一订单号
        $data['mailprice'] = $dispatchprice;
        $data['goodsprice'] = $mylist['goodsprice'];
        $data['totalprice'] = $price;
        $data['pay_type'] = $pay_type;
        $data['detail'] = $_POST['detail'];
        $result = db('order')->insertGetId($data);
        if ($result) {
            foreach ($mylist['allgoods'] as $key => $val) {
                $row['sid'] = $val['sid'];
                $row['order_sn'] = $data['order_sn'];
                $row['user_id'] = $data['uid'];
                $row['totalprice'] = $val['totalprice'];
                $row['malltype'] = $is_dispatch;
                $row['addtime'] = time();
                db('shop_order')->insert($row);
            }
            if ($types) {
                $good = $this->getgooddet($goodid);
                $row2['sid'] = $goodid;
                $row2['order_sn'] = $data['order_sn'];
                $row2['goodid'] = $goodid;
                $row2['num'] = $num;
                $row2['pic'] = $good['indexpic'];
                $row2['goodname'] = $good['title'];
                $row2['goodprice'] = $good['price'];
                // $row2['addtime']=time();
                db('shop_order_good')->insert($row2);
            } else {
                $allgoods = Db::name('cart')->where('id', 'in', $cartall)->select();
                foreach ($allgoods as $k => $v) {
                    $good = $this->getgooddet($v['gid']);
                    $row2['sid'] = $v['sid'];
                    $row2['order_sn'] = $data['order_sn'];
                    $row2['goodid'] = $v['gid'];
                    $row2['num'] = $v['num'];
                    $row2['pic'] = $good['indexpic'];
                    $row2['goodname'] = $good['title'];
                    $row2['goodprice'] = $good['price'];
                    // $row2['addtime']=time();
                    db('shop_order_good')->insert($row2);
                }
            }
            //删除购物车数据
            if (!$types) {
                foreach ($cartall as $k => $v) {
                    db('cart')->where(['id' => $v])->delete();
                }
            }
            if ($couponid) {
                db('mycoupon')->where(['id' => $couponid])->update(['sent' => 1]);
            }
            //把需要的数据返回

            /* $out_trade_no = $data['order_sn']; //商户系统内部订单号，要求64个字符内、且在同一个商户号下唯一
             $subject = '测试'; //订单标题
             $total_fee = $price * 100; //订单总金额，单位为分
             $users = [
             'appid' => 'wx1b1b4a148bacc3b1',
             'openid' => '',
             ];
             $users = json_encode($users);
             $hpay = new \Hmoney\Hmoneypay();
             $datas = $hpay->getPay($out_trade_no, $subject, $total_fee, $users);
             if ($datas['return_code'] == 'SUCCESS' && $datas['result_code'] == 'SUCCESS') {
                 $d = [
                     'payurl' => $datas['hy_mini_pay_params'],
                     'order_sn' => $out_trade_no,
                     'paymoney' => $price,
                 ];
                 $payurl = $datas['hy_mini_pay_params'];
                 _success('下单成功', '200', $payurl);
             } else {
                 _internalError('下单失败');
             }
             */
            //_success('下单成功', '200', $hpay->getPay($out_trade_no, $subject, $total_fee, $users));
            _success('下单成功', '200', '');
        } else {
            _internalError('系统繁忙');
        }
    }

    //确认订单
    public function confirm()
    {
        $user_id = $this->uid;
        $addr_id = intval($_POST['addr_id']);
        $couponid = intval($_POST['yhqid']);
        $types = _param('types', '', 0, false); //是否直接购买
        if ($types) {
            $goodid = _param('gid', '商品错误');
            $num = _param('num', '', '1', false);
            $cartall = ['goodid' => $goodid, 'num' => $num];
        } else {
            $cartall = _param('cart_id', '请选择商品');
        }
        $mylist = $this->cartgoods($types, $cartall); //商品明细
        //配送方式
        $walist = [
            ];
        if ($addr_id) {
            $where['id'] = $addr_id;
        } else {
            $where['mid'] = $user_id;
            $where['is_default'] = 1;
        }
        $addr = db('Address')->where($where)->find();
        if ($addr) {
            $addr['phone'] = substr_replace($addr['phone'], '****', 3, 4);
        } else {
            $addr = [];
        }
        $dispatchprice = 0;
        $couponprice = 0;
        //优惠券
        $counts = db('mycoupon')->where(['sent' => 0, 'user_id' => $user_id, 'maxprice' => ['<=', $mylist['goodsprice']]])->count();
        if ($counts) {
            $title = $counts.'个可用优惠券';
            if ($couponid) {
                $mycoupon = db('mycoupon')->where(['id' => $couponid])->field('minprice,couponid')->find();
                $mycoupon[0]['title'] = db('coupon')->where(['id' => $mycoupon['couponid']])->value('name');
                $mycoupon[0]['couponprice'] = $mycoupon['minprice'];
            } else {
                $mycoupon = db('mycoupon')->where(['sent' => 0, 'user_id' => $user_id, 'maxprice' => ['<=', $mylist['goodsprice']]])->select();
                foreach ($mycoupon as $key => $val) {
                    $mycoupon[$key]['title'] = db('coupon')->where(['id' => $val['couponid']])->value('name');
                    $mycoupon[$key]['couponprice'] = $val['minprice'];
                }
            }
        } else {
            $title = '无可用';
        }
        //地址

        $mlist = [
                'addr' => $addr,
                'goods' => $mylist['allgoods'],
                'goodscount' => $mylist['total'],
                'goodsprice' => $mylist['goodsprice'],
                'walist' => $walist,
                'dispatchprice' => $dispatchprice,
                'couponprice' => $couponprice,
                'title' => $title,
            ];
        _success('获取成功', 200, $mlist);
    }

    public function getAddress($address)
    {
        // $address = '渝中区上清寺中山一路165号';
        $phpadd = new \Phpaddress\PhpAddress();
        $mylat = $phpadd->GetLN($address);
        if (!$mylat) {
            $mylat = [];
        } else {
            $mylat = (array) $mylat;
            $mylat = (array) $mylat['result'];
            $mylat = (array) $mylat['location'];
        }

        // var_dump($mylat);

        return $mylat;
        // exit();
    }

    public function changeAddress()
    {
        $userid = $this->uid;
        $addid = _param('addid', '请选择地址', '', false);
        $addr = db('Address')->where('id', $addid)->where('mid', $userid)->find();
        if (!$addr) {
            _internalError('地址信息错误', 500, '');
        }
        $adds = $addr['address'];
        $count = _param('goodnum', '', 1, false);
        $type = _param('addtype', '', '3', false);
        if ($type == 3) {
            $datas = [
               'waytype' => 3,
                'waymoney' => 0,
            ];

            _success('获取成功', 200, $datas);
        } else {
            $this->getNewPlace($adds, $count, $type, 1);
        }
    }

    public function getNewPlace($address, $count, $type = 3, $aj = 0)
    {
        // 29.582224,106.507063
        if (!$address) {
            $address = '渝中区上清寺中山一路165号';
        }
        $lnglat = $this->getAddress($address);
        if (!$lnglat) {
            $datas = [
                $waytype => 3,
                $waymoney => 0,
            ];
            if ($aj) {
                _success('获取成功', 200, $datas);
            } else {
                return $datas;
            }
        }
        $data = Db::name('sysaddress')->select();
        $price = [];
        foreach ($data as $k => $v) {
            $add = $this->getAddLng($v['jwd']);
            $phpadd = new \Phpaddress\PhpAddress();
            $tt = $phpadd->isPointInPolygon($add, $lnglat);
            if ($tt) {
                $price = $v;
                exit();
            }
        }
        $moneyType = 3;
        if ($price) {
            $money = 0;
            $mData = Db::name('sysadoption')
            ->where('sysaddid', $price['id'])
            ->where('minnum', '<', $count)
            ->where('maxnum', '>', $count)->find();
            if ($mData) {
                $money = intval($mData['money'] * $count);
                $moneyType = $price['type'];
            }
        } else {
            $moneyType = 3;
            $money = 0;
        }
        $datas = [
            'waytype' => $moneyType,
            'waymoney' => $money,
        ];
        if ($aj) {
            _success('获取成功', 200, $datas);
        } else {
            return $datas;
        }
    }

    public function getAddLng($address)
    {
        $address = substr($address, 0, strlen($address) - 1);
        $address = explode('|', $address);
        $add = [];
        if ($address) {
            foreach ($address as  $k => $v) {
                $a = explode(',', $v);
                $add[$k]['lat'] = $a[0];
                $add[$k]['lng'] = $a[1];
            }
        }

        return $add;
    }

    //商品计算
    public function cartgoods($types = 1, $cartall = [])
    {
        $allgoods = [];
        $goodsprice = 0;
        $total = 0;
        if ($types) {
            $item = $this->getgooddet($cartall['goodid'], 'id,sid,title,price,goods_option,photo_x');
            $item['num'] = $total = $cartall['num'];
            $goodsprice = $item['price'] * $item['num'];
            $shop['sid'] = $item['shop']['sid'];
            $shop['shopname'] = $item['shop']['shopname'];
            $shop['headimgurl'] = $item['shop']['headimgurl'];
            $shop['goods'][0] = $item;
            $shop['addtime'] = time();
            $shop['money'] = $goodsprice;
            //$allgoods[0]['goods'][0] = $item;
            $allgoods[0]['addtime'] = time();
            $allgoods[0]['sid'] = $item['shop']['sid'];
            $allgoods[0]['shop'] = $shop;
            $total = $item['num'];
        } else {
            $allgoods = Db::name('cart')->where('id', 'in', $cartall)->group('sid')->select();
            foreach ($allgoods as $key => $val) {
                $allgood = Db::name('cart')->where('id', 'in', $cartall)->where('uid', $val['uid'])->where('sid', $val['sid'])->select();
                $shop = Db::name('supuser')->where('sid', $val['sid'])->field('sid,shopname,headimgurl')->find();
                if ($shop['headimgurl']) {
                    $shop['headimgurl'] = __DATAURL__.$shop['headimgurl'];
                }
                $allgoods[$key]['shop'] = $shop;
                foreach ($allgood as $k => $v) {
                    $allgood[$k]['good'] = $this->getgooddet($v['gid'], 'id,sid,title,price,goods_option,photo_x');
                }
                $allgoods[$key]['shop']['goods'] = $allgood;
                $allgoods[$key]['shop']['money'] = Db::name('cart')->where('id', 'in', $cartall)->where('uid', $val['uid'])->where('sid', $val['sid'])->sum('money');
            }
            $goodsprice = Db::name('cart')->where('id', 'in', $cartall)->sum('money');
        }

        return ['allgoods' => $allgoods, 'goodsprice' => $goodsprice, 'total' => $total];
    }

    //邮费计算
    public function dispatch($allgoods)
    {
        $weight = 0;
        $dispatch = db('dispatch')->where(['istype' => 0, 'is_show' => 1])->find();
        foreach ($allgoods as $g) {
            $weight += $g['weight'] * $g['num'];
        }
        if ($weight <= $dispatch['firstweight']) {
            $dispatchprice = $dispatch['firstprice'];
        } else {
            $dispatchprice = $dispatch['firstprice'];
            $secondweight = $weight - $dispatch['firstweight'];
            if ($secondweight % $dispatch['secondweight'] == 0) {
                $dispatchprice += (int) ($secondweight / $dispatch['secondweight']) * $dispatch['secondprice'];
            } else {
                $dispatchprice += (int) ($secondweight / $dispatch['secondweight'] + 1) * $dispatch['secondprice'];
            }
        }

        return $dispatchprice;
    }
}
