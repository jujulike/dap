<?php
/**
 * Created by PhpStorm.
 * User: BikeVR
 * Date: 2020/10/12
 * Time: 14:32.
 */

namespace app\apihome\controller;

use think\Db;

class Order extends Home
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /*
     * 订单列表
     */
    public function index()
    {
        $uid = $this->uid;
        $ordersn = input('order_sn');
        if ($ordersn) {
            $where['order_sn'] = ['like', '%'.$ordersn.'%'];
        }
        $goodname = input('goodname');
        if ($goodname) {
            $order_sn = [];
            $whe['goodname'] = ['like', '%'.$goodname.'%'];
            $order = Db::name('shop_order_good')->where($whe)->select();
            if ($order) {
                $order_sn = array_column($order, 'order_sn');
            }
            if ($order_sn) {
                $where['order_sn'] = ['in', $ordersn];
            }
        }
        $where['user_id'] = $uid;
        $type = _param('type', '', 'all', false);
        switch ($type) {
            case 'unpay'://待付款
                $where['paystatus'] = 0;
                break;
            case 'untouch'://待处理
                $where['sent'] = 1;
                break;
            case 'unsent'://待发货
                $where['paystatus'] = 1;
                $where['sent'] = 2;
                break;
            case 'senting'://待收货
                $where['sent'] = 3;
                $where['paystatus'] = 1;
                break;
            case 'finish'://已完成
                $where['sent'] = 5;
                $where['paystatus'] = 1;
                break;
            case 'cansel'://已作废
                $where['sent'] = -2;
                break;
            default:
                $where['id'] = ['>', 0];
        }
        $page = intval($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;
        $onepagenum = $this->onepagenum;
        $limit = intval($page - 1) * $onepagenum;
        $lists = Db::name('order')->where($where)->order('id desc')->limit($limit.','.$onepagenum)->select();
        $counts = Db::name('order')->where($where)->order('id desc')->count();
        foreach ($lists as $key => $val) {
            $lists[$key]['statusword'] = $this->getstatuscode($val['paystatus'], $val['sent']);
            $shop = Db::name('supuser')->where('sid', $val['sid'])->field('sid,shopname,headimgurl')->find();
            if ($shop['headimgurl']) {
                $shop['headimgurl'] = __DATAURL__.$shop['headimgurl'];
            }
            $shop['good'] = $this->getgood($val['order_sn'], $shop['sid']);
            $lists[$key]['shop'] = $shop;
        }
        $data = [
            'order' => $lists,
            'ordercount' => $counts,
            'webtitle' => '订单列表',
        ];
        _success('获取成功', '200', $data);
    }

    /*
     * 订单详情
     *
     */
    public function orderdetail()
    {
        $orderid = _param('orderid', '订单错误');
        $order = Db::name('order')->where('id', $orderid)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $order['statusword'] = $this->getstatuscode($order['paystatus'], $order['order_sn']);
        $where['order_sn'] = ['in', $order['order_sn']];
        $shops = Db::name('shop_order')->where($where)->order('id desc')->select();
        foreach ($shops as $key => $val) {
            $shop = Db::name('supuser')->where('sid', $val['sid'])->field('sid,shopname,headimgurl')->find();
            if ($shop['headimgurl']) {
                $shop['headimgurl'] = __DATAURL__.$shop['headimgurl'];
            }
            $shop['good'] = $this->getgood($order['order_sn'], $val['sid']);
            $shops[$key]['shops'] = $shop;
        }
        if ($order['malltype'] == 3) {
            $order['malltypecode'] = '自提';
        }
        if ($order['malltype'] == 2) {
            $order['malltypecode'] = '快小驴物流';
        }
        if ($order['malltype'] == 1) {
            $order['malltypecode'] = '快小驴专车';
        }
        if ($order['malltype'] != '3') {
            $bigorder = Db::name('order')->where('order_sn', $order['order_sn'])->find();
            $addr = explode('|', $bigorder['address']);
            $order['name'] = $addr[0];
            $order['mobile'] = substr_replace($addr[1], '****', 3, 4);
            $order['address'] = $addr[2];
        } else {
            $order['name'] = $order['username'];
            $order['mobile'] = substr_replace($order['userphone'], '****', 3, 4);
            $order['address'] = '';
        }
        $order['orderaddtime'] = date('Y-m-s h:i', $order['addtime']);
        $data = [
            'order' => $order,
            'shops' => $shops,
        ];
        _success('获取成功', '200', $data);
    }

    /*
     * 取消订单
     */
    public function changestatus()
    {
        $orderid = _param('orderid', '订单错误');

        $order = Db::name('order')->where('id', $orderid)->where('pay_status', '1')->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $sent = _param('sent', '参数错误');
        $t['sent'] = $sent;
        $res = Db::name('order')->where('id', $orderid)->update($t);
        if ($res) {
            _success('操作成功');
        } else {
            _internalError('网络繁忙');
        }
    }

    /*
     * 评价订单
     */
    public function comorder()
    {
        $op = _param('op', '', '', false);
        if (!$op) {
            $orderid = _param('order_sn', '订单错误');
            $order = Db::name('order')->where('order_sn', $orderid)->find();
            if (!$order) {
                _internalError('订单信息错误');
            }
            $ordergood = Db::name('order_info_good')->where('order_sn', $order['order_sn'])->select();
            foreach ($ordergood as $key => $val) {
                $ordergood[$key]['good'] = $this->getordergood($val['gid']);
            }
            $data = [
                'order' => $ordergood,
            ];
            _success('', '', $data);
        } else {
            $orderid = _param('order_sn', '订单错误');
            $order = Db::name('order')->where('order_sn', $orderid)->find();
            if (!$order) {
                _internalError('订单信息错误');
            }
            $rebate = json_decode($_POST['rebate'], true);
            foreach ($rebate as $k => $v) {
                $d['gid'] = $v['gid'];
                $d['gid'] = $v['gid'];
                $d['score'] = $v['score'];
                $d['uid'] = $this->uid;
                $d['sid'] = $v['score'];
                if ($v['pics']) {
                    $d['pics'] = str_replace(__DATAURL__, '', $v['pics']);
                }
                if ($v['content']) {
                    $d['content'] = $v['content'];
                }
                $d['addtime'] = time();
                $resid = Db::name('comment')->insertGetId($v);
                $up['commid'] = $resid;
                Db::name('shop_order_good')->where('id', $v['id'])->update($up);
            }
            Db::name('shop_order')->where('order_sn', $order)->update(['sent' => 4]);
            Db::name('shop_order_good')->where('order_sn', $order)->update(['sent' => 4]);
            _success('评价成功');
        }
    }

    /*
     * 退款订单
     */
    public function orderrefund()
    {
        $ordersn = input('order_sn');
        if ($ordersn) {
            $whe['order_sn'] = ['like', '%'.$ordersn.'%'];
        }
        $goodname = input('goodname');
        if ($goodname) {
            $whe['goodname'] = ['like', '%'.$goodname.'%'];
        }
        $type = _param('type', '', 'all', false);
        $whe['uid'] = $this->uid;
        switch ($type) {
            case 1:
                $whe['refundstatus'] = '1'; //待处理
                $whe['is_refundok'] = '0'; //已完成
                break;
            case 2:
                $whe['refundstatus'] = '2'; //退货中
                $whe['is_refundok'] = '0'; //已完成
                break;
            case 3:
                $whe['is_refundok'] = '1'; //已完成
                break;
            case -1:
                $whe['refundstatus'] = '3'; //申请失败
                break;
            default:
                $whe['id'] = ['>', 0];
        }
        $page = intval($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;
        $onepagenum = $this->onepagenum;
        $limit = intval($page - 1) * $onepagenum;
        $order = Db::name('shop_order_good')->where($whe)->order('id desc')->limit($limit.','.$onepagenum)->select();
        $ordercount = Db::name('shop_order_good')->where($whe)->count();
        foreach ($order as $key => $val) {
            if ($val['refundstatus'] = '1') {
                $order[$key]['refund'] = '待处理';
            }
            if ($val['refundstatus'] = '2') {
                $order[$key]['refund'] = '已同意';
            }
            if ($val['refundstatus'] = '3') {
                $order[$key]['refund'] = '已拒绝';
            }
            if ($val['is_refundok'] = '1') {
                $order[$key]['refund'] = '已完成';
            }
            $option = Db::name('good_option')->where('id', $val['optionid'])->value('title');
            $order[$key]['opname'] = $option ? $option : $val['goodname'];
            $order[$key]['goodpic'] = Db::name('good')->where('id', $val['gid'])->value('photo_x');
            $order[$key]['totalmoney'] = $val['num'] * $val['goodprice'];
        }
        $data = [
            'orderlist' => $order,
            'ordercount' => $ordercount,
            'webtitle' => '售后订单',
        ];
        _success('获取成功', 200, $data);
    }

    /*
     * 退款详情
     */

    public function refunddetail()
    {
        $orderid = _param('orderid', '订单错误');
        $whe['sid'] = $this->sid;
        $whe['id'] = $orderid;
        $order = Db::name('shop_order_good')->where($whe)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $order['refund'] = '';
        if ($order['refundstatus'] = '1') {
            $order['refund'] = '待处理';
        }
        if ($order['refundstatus'] = '2') {
            $order['refund'] = '已同意';
        }
        if ($order['refundstatus'] = '3') {
            $order['refund'] = '已拒绝';
        }
        if ($order['is_refundok'] = '1') {
            $order['refund'] = '已完成';
        }
        $option = Db::name('good_option')->where('id', $order['optionid'])->value('title');
        $order['opname'] = $option ? $option : $order['goodname'];
        $order['goodpic'] = Db::name('good')->where('id', $order['gid'])->value('photo_x');
        $order['totalmoney'] = $order['num'] * $order['goodprice'];
        $bigorder = Db::name('order')->where('order_sn', $order['order_sn'])->find();
        if ($bigorder['malltype'] == 1) {
            $order['malltypecode'] = '自提';
        }
        if ($bigorder['malltype'] == 2) {
            $order['malltypecode'] = '快小驴物流';
        }
        if ($bigorder['malltype'] == 3) {
            $order['malltypecode'] = '快小驴专车';
        }
        if ($bigorder['malltype'] != '1') {
            $addr = explode('|', $bigorder['address']);
            $order['name'] = $addr[0];
            $order['mobile'] = substr_replace($addr[1], '****', 3, 4);
            $order['address'] = $addr[2];
        } else {
            $order['name'] = $bigorder['username'];
            $order['mobile'] = substr_replace($bigorder['userphone'], '****', 3, 4);
            $order['address'] = '';
        }
        $order['orderaddtime'] = date('Y-m-s h:i', $bigorder['addtime']);
        $data = [
            'order' => $order,
            'webtitle' => '售后订单详情',
        ];
        _success('获取成功', 200, $data);
    }

    /*
     * 提交退款
     */
    public function torefund()
    {
        $orderid = _param('orderid', '订单错误');
        $whe['refundstatus'] = 0;
        $whe['id'] = $orderid;
        $order = Db::name('shop_order_good')->where($whe)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $money = _param('money', '请填写退款金额');
        $refundcontent = _param('content', '请填写退款原因');
        $d['refundtime'] = time();
        $d['refundcontent'] = $refundcontent;
        $d['refundmoney'] = $money;
        $res = Db::name('shop_order_good')->where('id', $orderid)->update($d);
        if ($res) {
            _success('提交成功');
        } else {
            _internalError('提交失败');
        }
    }

    /*
     * 提交退款
     */
    public function torefundall()
    {
        $orderid = _param('order_sn', '订单错误');
        $whe['sent'] = ['in', '0,1'];
        $whe['order_sn'] = $orderid;
        $order = Db::name('order')->where($whe)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        //$money = _param('money', '请填写退款金额');
        $refundcontent = _param('content', '请填写退款原因');
        $d['refundtime'] = time();
        $d['refundcontent'] = $refundcontent;
        $data = Db::name('shop_order_good')->where('order_sn', $orderid)->select();
        foreach ($data as $k => $v) {
            $d['refundmoney'] = $v['goodprice'];
            $re = Db::name('shop_order_good')->where('id', $v['id'])->update($d);
        }
        $tore['sent'] = -1;
        $res = Db::name('order')->where('order_sn', $orderid)->update($tore);
        if ($res) {
            _success('提交成功');
        } else {
            _internalError('提交失败');
        }
    }

    /**
     * @param $pay
     * @param $sent
     *
     * @return string
     *                获取订单状态文字
     */
    public function getstatuscode($pay, $sent)
    {
        switch ($sent) {
            case '1'://待处理
                $statusword = '待处理';
                break;
            case '2'://待发货
                $statusword = '代发货';
                break;
            case '2,3'://待收货
                $statusword = '待签收';
                break;
            case '4'://待
                $statusword = '等评价';
                break;
            case '5'://已完成
                $statusword = '交易完成';
                break;
            case '-2'://已作废
                $statusword = '交易关闭';
                break;
            default:
                $where['id'] = ['>', 0];
        }
        if (!$pay) {
            $statusword = '等待买家付款';
        }

        return $statusword;
    }

    public function getordergood($ordersn, $sid)
    {
        $data = Db::name('shop_order_good')->where('order_sn', $ordersn)->where('sid', $sid)->select();
        $count = Db::name('shop_order_good')->where('order_sn', $ordersn)->where('sid', $sid)->sum('num');
        foreach ($data as $v => $k) {
            $option = Db::name('good_option')->where('id', $v['optionid'])->value('title');
            $data[$k]['opname'] = $option ? $option : $v['goodname'];
            $data[$k]['goodpic'] = Db::name('good')->where('id', $v['gid'])->value('photo_x');
        }
        $t['goods'] = $data;
        $t['goodscount'] = $count;

        return $t;
    }

    public function getordergoodinfo($gid, $ordersn)
    {
        $data = Db::name('shop_order_good')->where('order_sn', $ordersn)->where('gid', $gid)->find();
        $good = Db::name('good')->where('id', $gid)->field('photo_x')->find();
        $data['goodimg'] = '';
        if ($good['photo_x']) {
            $img = explode(',', $good['photo_x']);
            $data['goodimg'] = __DATAURL__.$img[0];
        }

        return $data;
    }
}
