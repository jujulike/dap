<?php
/**
 * Created by PhpStorm.
 * User: BikeVR
 * Date: 2020/9/23
 * Time: 11:32
 * desc:商家订单.
 */

namespace app\apishop\controller;

use think\Db;

class Suporder extends Supbase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //订单列表
    public function index()
    {
        $sid = $this->sid;
        $where['sid'] = $sid;
        $ordersn = input('order_sn');
        if ($ordersn) {
            $where['order_sn'] = ['like', '%'.$ordersn.'%'];
        }
        $goodname = input('goodname');
        if ($goodname) {
            $order_sn = [];
            $whe['goodname'] = ['like', '%'.$goodname.'%'];
            $whe['sid'] = $sid;
            $order = Db::name('shop_order_good')->where($whe)->select();
            if ($order) {
                $order_sn = array_column($order, 'order_sn');
            }
            if ($order_sn) {
                $where['order_sn'] = ['in', $ordersn];
            }
        }
        $userid = _param('userid', '', '', false);
        if ($userid) {
            $where['user_id'] = $userid;
        }
        $type = _param('type', '', 'all', false);
        switch ($type) {
            case 'unpay'://待付款
                $where['paystatus'] = 0;
                break;
            case 'untouch'://待处理
                $where['sent'] = 1;
                break;
            case 'unsent'://待发货
                $where['paystatus'] = 1;
                $where['sent'] = 2;
                break;
            case 'senting'://待收货
                $where['sent'] = 3;
                $where['paystatus'] = 1;
                break;
            case 'finish'://已完成
                $where['sent'] = 5;
                $where['paystatus'] = 1;
                break;
            case 'cansel'://已作废
                $where['sent'] = -2;
                break;
            default:
                $where['id'] = ['>', 0];
        }
        $page = intval($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;
        $onepagenum = $this->onepagenum;
        $limit = intval($page - 1) * $onepagenum;
        $lists = Db::name('shop_order')->where($where)->order('id desc')->limit($limit.','.$onepagenum)->select();
        $counts = Db::name('shop_order')->where($where)->order('id desc')->count();
        foreach ($lists as $key => $val) {
            $lists[$key]['statusword'] = $this->getstatuscode($val['paystatus'], $val['sent']);
            $d = $this->getgood($val['order_sn']);
            $lists[$key]['goodslist'] = $d['goods'];
            $lists[$key]['goodscount'] = $d['goodscount'];
        }

        $data = [
            'order' => $lists,
            'ordercount' => $counts,
            'webtitle' => '订单列表',
        ];
        _success('获取成功', '200', $data);
    }

    /**
     * 订单详情.
     * */
    public function orderdetail()
    {
        $orderid = _param('orderid', '订单错误');
        $order = Db::name('shop_order')->where('id', $orderid)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $order['statusword'] = $this->getstatuscode($order['paystatus'], $order['order_sn']);
        $d = $this->getgood($order['order_sn']);
        $order['goodslist'] = $d['goods'];
        $order['goodscount'] = $d['goodscount'];
        if ($order['malltype'] == 1) {
            $order['malltypecode'] = '自提';
        }
        if ($order['malltype'] == 2) {
            $order['malltypecode'] = '快小驴物流';
        }
        if ($order['malltype'] == 3) {
            $order['malltypecode'] = '快小驴专车';
        }
        if ($order['malltype'] != '1') {
            $bigorder = Db::name('order')->where('order_sn', $order['order_sn'])->find();
            $addr = explode('|', $bigorder['address']);
            $order['name'] = $addr[0];
            $order['mobile'] = substr_replace($addr[1], '****', 3, 4);
            $order['address'] = $addr[2];
        } else {
            $order['name'] = $order['username'];
            $order['mobile'] = substr_replace($order['userphone'], '****', 3, 4);
            $order['address'] = '';
        }
        $order['orderaddtime'] = date('Y-m-s h:i', $order['addtime']);

        _success('获取成功', '200', $order);
    }

    /**
     * 接单与否.
     */
    public function changestatus()
    {
        $status = _param('s', '状态参数错误'); //1:接单，2：拒绝接
        $orderid = _param('orderid', '订单参数错误');
        $sid = $this->sid;
        $order = Db::name('shop_order')->where('id', $orderid)->where('sid', $sid)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        $new['uptime'] = time();
        if ($status == 1) {
            $new['sent'] = 3;
        } else {
            $new['sent'] = -2;
        }
        $re = Db::name('shop_order')->where('id', $orderid)->where('sid', $sid)->update($new);
        if ($re) {
            _success('操作成功');
        }
        _internalError('操作失败');
    }

    /**
     *退款订单.
     **/
    public function refundorder()
    {
        $ordersn = input('order_sn');
        if ($ordersn) {
            $whe['order_sn'] = ['like', '%'.$ordersn.'%'];
        }
        $goodname = input('goodname');
        if ($goodname) {
            $whe['goodname'] = ['like', '%'.$goodname.'%'];
        }
        $type = _param('type', '', 'all', false);
        $whe['sid'] = $this->sid;
        switch ($type) {
            case 1:
                $whe['refundstatus'] = '1'; //待处理
                $whe['is_refundok'] = '0'; //已完成
                break;
            case 2:
                $whe['refundstatus'] = '2'; //退货中
                $whe['is_refundok'] = '0'; //已完成
                break;
            case 3:
                $whe['is_refundok'] = '1'; //已完成
                break;
            case -1:
                $whe['refundstatus'] = '3'; //申请失败
                break;
            default:
                $whe['id'] = ['>', 0];
        }
        $page = intval($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;
        $onepagenum = $this->onepagenum;
        $limit = intval($page - 1) * $onepagenum;
        $order = Db::name('shop_order_good')->where($whe)->order('id desc')->limit($limit.','.$onepagenum)->select();
        $ordercount = Db::name('shop_order_good')->where($whe)->count();
        foreach ($order as $key => $val) {
            if ($val['refundstatus'] = '1') {
                $order[$key]['refund'] = '待处理';
            }
            if ($val['refundstatus'] = '2') {
                $order[$key]['refund'] = '已同意';
            }
            if ($val['refundstatus'] = '3') {
                $order[$key]['refund'] = '已拒绝';
            }
            if ($val['is_refundok'] = '1') {
                $order[$key]['refund'] = '已完成';
            }
            $option = Db::name('good_option')->where('id', $val['optionid'])->value('title');
            $order[$key]['opname'] = $option ? $option : $val['goodname'];
            $order[$key]['goodpic'] = Db::name('good')->where('id', $val['gid'])->value('photo_x');
            $order[$key]['totalmoney'] = $val['num'] * $val['goodprice'];
        }
        $data = [
            'orderlist' => $order,
            'ordercount' => $ordercount,
            'webtitle' => '售后订单',
        ];
        _success('获取成功', 200, $data);
    }

    /**退款详情*/
    public function refunddetail()
    {
        $orderid = _param('orderid', '订单错误');
        $whe['sid'] = $this->sid;
        $whe['id'] = $orderid;
        $order = Db::name('shop_order_good')->where($whe)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        if ($order['refundstatus'] = '1') {
            $order['refund'] = '待处理';
        }
        if ($order['refundstatus'] = '2') {
            $order['refund'] = '退款中';
        }
        if ($order['refundstatus'] = '3') {
            $order['refund'] = '已拒绝';
        }
        if ($order['is_refundok'] = '1') {
            $order['refund'] = '已完成';
        }
        $option = Db::name('good_option')->where('id', $order['optionid'])->value('title');
        $order['opname'] = $option ? $option : $order['goodname'];
        $order['goodpic'] = Db::name('good')->where('id', $order['gid'])->value('photo_x');
        $order['totalmoney'] = $order['num'] * $order['goodprice'];
        $bigorder = Db::name('order')->where('order_sn', $order['order_sn'])->find();
        if ($bigorder['malltype'] == 3) {
            $order['malltypecode'] = '自提';
        }
        if ($bigorder['malltype'] == 2) {
            $order['malltypecode'] = '快小驴物流';
        }
        if ($bigorder['malltype'] == 1) {
            $order['malltypecode'] = '快小驴专车';
        }
        if ($bigorder['malltype'] != '1') {
            $addr = explode('|', $bigorder['address']);
            $order['name'] = $addr[0];
            $order['mobile'] = substr_replace($addr[1], '****', 3, 4);
            $order['address'] = $addr[2];
        } else {
            $order['name'] = $bigorder['username'];
            $order['mobile'] = substr_replace($bigorder['userphone'], '****', 3, 4);
            $order['address'] = '';
        }
        $order['orderaddtime'] = date('Y-m-s h:i', $bigorder['addtime']);
        $data = [
            'order' => $order,
            'webtitle' => '售后订单详情',
        ];
        _success('获取成功', 200, $data);
    }

    /**退款状态修改*/
    public function changerefundorder()
    {
        $status = _param('s', '状态参数错误'); //1:同意，2：拒绝
        $orderid = _param('orderid', '订单参数错误');
        $sid = $this->sid;
        $order = Db::name('shop_order_good')->where('id', $orderid)->where('sid', $sid)->find();
        if (!$order) {
            _internalError('订单信息错误');
        }
        if ($status == 1) {
            $new['refundstatus'] = 2;
        }
        if ($status == 2) {
            $new['refundstatus'] = 3;
        }
        $re = Db::name('shop_order_good')->where('id', $orderid)->where('sid', $sid)->update($new);
        if ($re) {
            _success('操作成功');
        }
        _internalError('操作失败');
    }

    /**
     * @param $pay
     * @param $sent
     *
     * @return string
     *                获取订单状态文字
     */
    public function getstatuscode($pay, $sent)
    {
        switch ($sent) {
             case '1'://待处理
                 $statusword = '待处理';
                 break;
             case '2'://待发货
                 $statusword = '代发货';
                 break;
             case '2,3'://待收货
                 $statusword = '等待买家签收';
                 break;
             case '4'://待
                 $statusword = '等待买家评价';
                 break;
             case '5'://已完成
                 $statusword = '交易完成';
                 break;
             case '-2'://已作废
                 $statusword = '交易关闭';
                 break;
             default:
                 $where['id'] = ['>', 0];
         }
        if (!$pay) {
            $statusword = '等待买家付款';
        }

        return $statusword;
    }

    /**
     * @return string
     *
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getgood($ordersn, $sid)
    {
        $data = Db::name('shop_order_good')->where('order_sn', $ordersn)->where('sid', $sid)->select();
        $count = Db::name('shop_order_good')->where('order_sn', $ordersn)->where('sid', $sid)->sum('num');
        foreach ($data as $v => $k) {
            $option = Db::name('good_option')->where('id', $v['optionid'])->value('title');
            $data[$k]['opname'] = $option ? $option : $v['goodname'];
            $data[$k]['goodpic'] = Db::name('good')->where('id', $v['gid'])->value('photo_x');
        }
        $t['goods'] = $data;
        $t['goodscount'] = $count;

        return $t;
    }

    /*
     *
     * 商家订单、订单详情
     */
    public function myshoporder()
    {
        //商户信息
        $sid = intval($_POST['sid']);
        if (!$sid) {
            _internalError('数据错误', 500);

            return json_encode(['status' => 0, 'err' => '未获取到信息']);
            exit();
        }

        $op = $_POST['op'];
        if ($op == 'detail') {
            //订单明细
            $order_id = intval($_POST['order_id']);
            if (!$order_id) {
                _internalError('数据错误', 500);

                return json_encode(['status' => 0, 'err' => '未获取到信息']);
                exit();
            }
            $order = Db::name('shopp_order')->where(['id' => $order_id])->find();

            $addr = explode('|', $order['address']);
            $order['name'] = $addr[0];
            $order['mobile'] = substr_replace($addr[1], '****', 3, 4);
            $order['address'] = $addr[2];

            $order['addtime'] = date('Y-m-d H:i:s', $order['addtime']);
            if ($order['pay_time']) {
                $order['pay_time'] = date('Y-m-d H:i:s', $order['pay_time']);
            }
            $goods = Db::name('shopp_order_good')->where(['order_id' => $order_id])->select();
            foreach ($goods as &$v) {
                $gd = Db::name('good')->where(['id' => $v['goodid']])->field('title,photo_x,price,groupprice,msprice')->find();
                if ($gd['photo_x']) {
                    $v['photo_x'] = __DATAURL__.$gd['photo_x'];
                }
                if ($order['istypes'] == 1) {
                    $price = $gd['msprice'];
                } else {
                    $price = $gd['price'];
                }
                if ($v['optionid']) {
                    $option = Db::name('good_option')->where(['id' => $v['optionid']])->find();
                    $v['name'] = $option['title'];
                    if ($order['istypes'] == 1) {
                        $price = $option['msprice'];
                    } else {
                        $price = $option['marketprice'];
                    }
                }
                if ($v['paytype'] && $v['pay_status'] < 2) {
                    $v['djprice'] = $v['djprice'] / $v['num'];
                } else {
                    $order['price'] = $order['goodsprice'] - $order['couponprice'];
                }
                $v['price'] = $price;
                $v['title'] = $gd['title'];
            }
            if ($order['pay_status'] < 2) {
                $order['wkprice'] = $order['goodsprice'] - $order['couponprice'] - $order['price'];
            }

            return json_encode(['status' => 1, 'order' => $order, 'goods' => $goods]);
        } else {
            $where = ['sid' => $sid, 'is_delete' => 0];
            $stype = $_POST['stype'] ? $_POST['stype'] : '';
            if ($stype == 'unpay') {//待支付
                $where['pay_status'] = 0;
            } elseif ($stype == 'undver') {//待发货
                $where['pay_status'] = ['>', 0];
                $where['sent'] = [['gt', 0], ['lt', 4]];
            } elseif ($stype == 'unrece') {//已经发货
                $where['pay_status'] = 2;
                $where['sent'] = ['>', 3];
            } elseif ($stype == 'isok') {//已经完成
                $where['pay_status'] = 2;
                $where['sent'] = ['>', 3];
            } elseif ($stype == 'close') {//已关闭
                $where['pay_status'] = ['>', 0];
                $where['sent'] = -1;
            }

            $page = intval($_POST['page']) ? intval($_POST['page']) : 1;
            $limit = intval($page - 1) * 6;
            $lists = Db::name('shopp_order')->where($where)->order('id desc')->limit($limit.',6')->select();
            foreach ($lists as &$v) {
                $goods = Db::name('shopp_order_good')->where(['order_id' => $v['id']])->select();
                foreach ($goods as &$val) {
                    $gd = Db::name('good')->where(['id' => $val['goodid']])->field('photo_x,title,price,groupprice,msprice')->find();
                    if ($v['istypes'] == 2) {
                        $price = $gd['groupprice'];
                    } elseif ($v['istypes'] == 1) {
                        $price = $gd['msprice'];
                    } else {
                        $price = $gd['price'];
                    }
                    if ($val['optionid']) {
                        $option = Db::name('good_option')->where(['id' => $val['optionid']])->find();
                        $val['name'] = $option['title'];
                        if ($v['istypes'] == 2) {
                            $price = $option['groupprice'];
                        } elseif ($v['istypes'] == 1) {
                            $price = $option['msprice'];
                        } else {
                            $price = $option['marketprice'];
                        }
                    }
                    if ($val['paytype'] && $val['pay_status'] < 2) {
                        $price = $val['djprice'] / $val['num'];
                    } else {
                        $v['price'] = $v['goodsprice'] - $v['couponprice'];
                    }
                    $val['oneprice'] = $price;
                    $val['title'] = $gd['title'];
                    if ($gd['photo_x']) {
                        $val['photo_x'] = __DATAURL__.$gd['photo_x'];
                    }
                }
                $v['goods'] = $goods;
            }

            return json_encode(['status' => 1, 'lists' => $lists]);
        }
    }
}
